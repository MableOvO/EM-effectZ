<?xml version="1.0" encoding="iso-8859-1" ?>
<ZApplication Name="App" Caption="ZGameEditor application" FileVersion="2">
  <Comment>
<![CDATA[https://github.com/LMP88959/NTSC-CRT
https://www.shadertoy.com/user/UltraMoogleMan]]>
  </Comment>
  <OnUpdate>
    <ZExpression>
      <Expression>
<![CDATA[//Optional: Move  to Constants to ZLibrary before release.
float Speed=1.0;
float delta=app.DeltaTime*Speed;
uTime+=delta;

//Most used ShaderToy uniform variables
uResolution=vector2(app.ViewportWidth,app.ViewportHeight);
uViewport=vector2(app.ViewportX,app.ViewportY);
uMouse=vector4(0.0,0.0,0.0,0.0);]]>
      </Expression>
    </ZExpression>
  </OnUpdate>
  <OnRender>
    <UseMaterial Material="mCanvas"/>
    <RenderSprite/>
  </OnRender>
  <Content>
    <Shader Name="MainShader" UpdateVarsOnEachUse="255">
      <VertexShaderSource>
<![CDATA[#version 120

void main(){
  vec4 vertex = gl_Vertex;
  vertex.xy *= 2.0;
  gl_Position = vertex;
}]]>
      </VertexShaderSource>
      <FragmentShaderSource>
<![CDATA[#version 120


//based off of  LMP88959's "NTSC-CRT"
//and "NTSC Codec" UltraMoogleMan
//epically ported by mae (me the one writing this)


uniform vec2 iResolution,iViewport;
uniform float alpha;
uniform float iTime;
uniform float blur;
uniform sampler2D tex1;
uniform sampler2D tex2;
#define iChannel0 tex1
#define iChannel1 tex2

#define PI 3.14159265358979323846

float scanlineIntensity = 0.05;
float noiseIntensity = 0.1;




float noise(vec2 pos, float evolve) {

    float e = fract((evolve*0.01));

    float cx  = pos.x*e;
    float cy  = pos.y*e;

   return 0.5 + 0.5 * sin(10.0 * fract(cx * 1.5 / (cy + 0.1) + pow(abs(cy / 22.4), 2.7)));
}

const vec4 Zero = vec4(0.0);
const vec4 Half = vec4(0.5);
const vec4 One = vec4(1.0);
const vec4 Two = vec4(2.0);
const float Pi = 3.1415926535;
const float Pi2 = 6.283185307;

vec4 A = vec4(0.5 * alpha * noise(iResolution*2,iTime));
vec4 B = vec4(0.5);
float P = 1.0;
float CCFrequency = 3.59754545;
float YFrequency = 6.0;
float IFrequency = 1.2;
float QFrequency = 0.6;
float NotchHalfWidth = 2.0;
float ScanTime = 52.6 ;
float MaxC = 2.1183 ;
vec4 MinC = vec4(-1.1183);
vec4 CRange = vec4(3.2366);






vec4 CompositeSample(vec2 UV) {
	vec2 InverseRes = 1.0 / iResolution.xy ;
	vec2 InverseP = vec2(P, 0.0) * InverseRes;
	vec2 C0 = UV;
	vec2 C1 = UV + InverseP * 0.25;
	vec2 C2 = UV + InverseP * 0.50;
	vec2 C3 = UV + InverseP * 0.75;
	vec4 Cx = vec4(C0.x, C1.x, C2.x, C3.x);
	vec4 Cy = vec4(C0.y, C1.y, C2.y, C3.y);

	vec3 Texel0 = texture2D(iChannel0, C0).rgb;
	vec3 Texel1 = texture2D(iChannel0, C1).rgb;
	vec3 Texel2 = texture2D(iChannel0, C2).rgb;
	vec3 Texel3 = texture2D(iChannel0, C3).rgb;

	vec4 T = A * Cy * vec4(iResolution.x) * Two + B + Cx;

	const vec3 YTransform = vec3(0.299, 0.587, 0.114);
	const vec3 ITransform = vec3(0.595716, -0.274453, -0.321263);
	const vec3 QTransform = vec3(0.211456, -0.522591, 0.311135);

	float Y0 = dot(Texel0, YTransform);
	float Y1 = dot(Texel1, YTransform);
	float Y2 = dot(Texel2, YTransform);
	float Y3 = dot(Texel3, YTransform);
	vec4 Y = vec4(Y0, Y1, Y2, Y3);

	float I0 = dot(Texel0, ITransform);
	float I1 = dot(Texel1, ITransform);
	float I2 = dot(Texel2, ITransform);
	float I3 = dot(Texel3, ITransform);
	vec4 I = vec4(I0, I1, I2, I3);

	float Q0 = dot(Texel0, QTransform);
	float Q1 = dot(Texel1, QTransform);
	float Q2 = dot(Texel2, QTransform);
	float Q3 = dot(Texel3, QTransform);
	vec4 Q = vec4(Q0, Q1, Q2, Q3);

	vec4 W = vec4(Pi2 * CCFrequency * ScanTime);
	vec4 Encoded = Y + I * cos(T * W) + Q * sin(T * W);
	return (Encoded - MinC) / CRange;
}

vec3 NTSCCodec(vec2 UV)
{
	vec2 InverseRes = 1.0 / iResolution.xy;
	vec4 YAccum = Zero;
	vec4 IAccum = Zero;
	vec4 QAccum = Zero;
	float QuadXSize = iResolution.x * 4.0;
	float TimePerSample = ScanTime  / QuadXSize ;


	float Fc_y1 = (CCFrequency - NotchHalfWidth) * TimePerSample;
	float Fc_y2 = (CCFrequency + NotchHalfWidth) * TimePerSample;
	float Fc_y3 = YFrequency * TimePerSample;
	float Fc_i = IFrequency * TimePerSample;
	float Fc_q = QFrequency * TimePerSample;
	float Pi2Length = Pi2 / 82.0;
	vec4 NotchOffset = vec4(0.0, 1.0, 2.0, 3.0);
	vec4 W = vec4(Pi2 * CCFrequency * ScanTime);
	for(float n = -41.0; n < 42.0; n += 4.0)
	{
		vec4 n4 = n + NotchOffset;
		vec4 CoordX = UV.x + InverseRes.x * n4 * 0.25 ;
		vec4 CoordY = vec4(UV.y);
		vec2 TexCoord = vec2(CoordX.r, CoordY.r);
		vec4 C = CompositeSample(TexCoord) * CRange + MinC;
		vec4 WT = W * (CoordX  + A * CoordY * Two * iResolution.x + B);

		vec4 SincYIn1 = Pi2 * Fc_y1 * n4;
		vec4 SincYIn2 = Pi2 * Fc_y2 * n4;
		vec4 SincYIn3 = Pi2 * Fc_y3 * n4;
		bvec4 notEqual = notEqual(SincYIn1, Zero);
		vec4 SincY1 = sin(SincYIn1) / SincYIn1;
		vec4 SincY2 = sin(SincYIn2) / SincYIn2;
		vec4 SincY3 = sin(SincYIn3) / SincYIn3;
		if(SincYIn1.x == 0.0) SincY1.x = 1.0;
		if(SincYIn1.y == 0.0) SincY1.y = 1.0;
		if(SincYIn1.z == 0.0) SincY1.z = 1.0;
		if(SincYIn1.w == 0.0) SincY1.w = 1.0;
		if(SincYIn2.x == 0.0) SincY2.x = 1.0;
		if(SincYIn2.y == 0.0) SincY2.y = 1.0;
		if(SincYIn2.z == 0.0) SincY2.z = 1.0;
		if(SincYIn2.w == 0.0) SincY2.w = 1.0;
		if(SincYIn3.x == 0.0) SincY3.x = 1.0;
		if(SincYIn3.y == 0.0) SincY3.y = 1.0;
		if(SincYIn3.z == 0.0) SincY3.z = 1.0;
		if(SincYIn3.w == 0.0) SincY3.w = 1.0;
		//vec4 IdealY = (2.0 * Fc_y1 * SincY1 - 2.0 * Fc_y2 * SincY2) + 2.0 * Fc_y3 * SincY3;
		vec4 IdealY = (2.0 * Fc_y1 * SincY1 - 2.0 * Fc_y2 * SincY2) + 2.0 * Fc_y3 * SincY3;
		vec4 FilterY = (0.54 + 0.46 * cos(Pi2Length * n4)) * IdealY;

		vec4 SincIIn = Pi2 * Fc_i * n4;
		vec4 SincI = sin(SincIIn) / SincIIn;
		if (SincIIn.x == 0.0) SincI.x = 1.0;
		if (SincIIn.y == 0.0) SincI.y = 1.0;
		if (SincIIn.z == 0.0) SincI.z = 1.0;
		if (SincIIn.w == 0.0) SincI.w = 1.0;
		vec4 IdealI = 2.0 * Fc_i * SincI;
		vec4 FilterI = (0.54 + 0.46 * cos(Pi2Length * n4)) * IdealI;

		vec4 SincQIn = Pi2 * Fc_q * n4;
		vec4 SincQ = sin(SincQIn) / SincQIn;
		if (SincQIn.x == 0.0) SincQ.x = 1.0;
		if (SincQIn.y == 0.0) SincQ.y = 1.0;
		if (SincQIn.z == 0.0) SincQ.z = 1.0;
		if (SincQIn.w == 0.0) SincQ.w = 1.0;
		vec4 IdealQ = 2.0 * Fc_q * SincQ;
		vec4 FilterQ = (0.54 + 0.46 * cos(Pi2Length * n4)) * IdealQ;

		YAccum = YAccum + C * FilterY;
		IAccum = IAccum + C * cos(WT) * FilterI;
		QAccum = QAccum + C * sin(WT) * FilterQ;
	}

	float Y = YAccum.r + YAccum.g + YAccum.b + YAccum.a;
	float I = (IAccum.r + IAccum.g + IAccum.b + IAccum.a) * 2.0;
	float Q = (QAccum.r + QAccum.g + QAccum.b + QAccum.a) * 2.0;

	vec3 YIQ = vec3(Y, I, Q);
	vec3 OutRGB = vec3(dot(YIQ, vec3(1.0, 0.956, 0.621)), dot(YIQ, vec3(1.0, -0.272, -0.647)), dot(YIQ, vec3(1.0, -1.106, 1.703)));

	return vec3(OutRGB);
}


void mainImage(out vec4 fragColor, in vec2 fragCoord) {
    vec2 size = iResolution.xy;
    vec2 uv = fragCoord / size;
    vec3 OutPixel = NTSCCodec(uv) ;

    vec3 color = texture2D(iChannel0, uv).rgb;
    vec3 rgbADJUST = vec3(1.005,1.06,1.07);

    color = vec3(OutPixel * rgbADJUST * alpha);

    float scanline = 1.0 - scanlineIntensity * (0.5 + 0.5 * cos(fragCoord.y * PI));
    color *= scanline;

    float noise = (fract(sin(dot(fragCoord.xy + iTime, vec2(12.0, 78.233))) * 43758.5453) - 0.5) * noiseIntensity;
    color += vec3(noise);

    fragColor = vec4(color, 1.0);
}




void main(){
  mainImage(gl_FragColor, gl_FragCoord.xy - iViewport);


}]]>
      </FragmentShaderSource>
      <UniformVariables>
        <ShaderVariable VariableName="iResolution" VariableRef="uResolution"/>
        <ShaderVariable VariableName="iViewport" VariableRef="uViewport"/>
        <ShaderVariable VariableName="iTime" VariableRef="uTime"/>
        <ShaderVariable VariableName="iMouse" VariableRef="uMouse"/>
        <ShaderVariable VariableName="alpha" ValuePropRef="1.0-Parameters[0]"/>
      </UniformVariables>
    </Shader>
    <Group Comment="Default ShaderToy Uniform Varible Inputs">
      <Children>
        <Variable Name="uResolution" Type="6"/>
        <Variable Name="uTime"/>
        <Variable Name="uTimeDelta"/>
        <Variable Name="uFrame" Type="1"/>
        <Variable Name="uFrameRate"/>
        <Variable Name="uMouse" Type="8"/>
        <Variable Name="uDate" Type="8"/>
      </Children>
    </Group>
    <Group Comment="FL Studio Varibles">
      <Children>
        <Array Name="Parameters" SizeDim1="20" Persistent="255">
          <Values>
<![CDATA[789C6360A02E000000500001]]>
          </Values>
        </Array>
        <Constant Name="ParamHelpConst" Type="2">
          <StringValue>
<![CDATA[alpha
]]>
          </StringValue>
        </Constant>
        <Constant Name="AuthorInfo" Type="2" StringValue="ported by mae"/>
      </Children>
    </Group>
    <Group Comment="Unique Uniform Varible Inputs">
      <Children>
        <Variable Name="uViewport" Type="6"/>
      </Children>
    </Group>
    <Group Comment="Materials and Textures">
      <Children>
        <Material Name="mCanvas" Shader="MainShader">
          <Textures>
            <MaterialTexture Name="FeedbackMaterialTexture" TexCoords="1"/>
            <MaterialTexture Name="Source1" Texture="Bitmap1"/>
          </Textures>
        </Material>
      </Children>
    </Group>
    <Bitmap Name="Bitmap1" Width="128" Height="128">
      <Producers>
        <BitmapCells CellStyle="5"/>
      </Producers>
    </Bitmap>
  </Content>
</ZApplication>
