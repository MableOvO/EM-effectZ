<?xml version="1.0" encoding="iso-8859-1" ?>
<ZApplication Name="App" Comment="https://www.shadertoy.com/user/Dem0g" Caption="ZGameEditor application" FOV="44.83" FileVersion="2">
  <OnUpdate>
    <ZExpression>
      <Expression>
<![CDATA[//Optional: Move  to Constants to ZLibrary before release.
float Speed=1.0;
float delta=app.DeltaTime*Speed;
uTime+=delta;

//Most used ShaderToy uniform variables
uResolution=vector2(app.ViewportWidth,app.ViewportHeight);
uViewport=vector2(app.ViewportX,app.ViewportY);
uMouse=vector4(0.0,0.0,0.0,0.0);]]>
      </Expression>
    </ZExpression>
  </OnUpdate>
  <OnRender>
    <UseMaterial Material="mCanvas"/>
    <RenderSprite/>
  </OnRender>
  <Content>
    <Shader Name="MainShader" UpdateVarsOnEachUse="255">
      <VertexShaderSource>
<![CDATA[#version 120

void main(){
  vec4 vertex = gl_Vertex;
  vertex.xy *= 2.0;
  gl_Position = vertex;
}]]>
      </VertexShaderSource>
      <FragmentShaderSource>
<![CDATA[#version 120
uniform float Alpha;
uniform float ff;
uniform float ff2;
uniform vec2 iResolution,iViewport;
uniform float iTime;
uniform vec4 iMouse;
uniform sampler2D tex1;
uniform sampler2D tex2;
#define iChannel0 tex1
#define iChannel1 tex2





float FF = 1.0 * ff;
float METABLOBS = 5.0 ;
float SUBBLOBS = 5.0 ;
float SMOOTHNESS = 1.5;
float RING = 1;
float RING_SIZE = RING - 0.701 ;





float rand(float x) {


    return fract(sin(dot(vec2(x,x),
                         vec2(12.9898,78.233)))*
        43758.5453123);
}

vec2 random2(vec2 st){
    st = vec2( dot(st,vec2(127.1,311.7)),
              dot(st,vec2(269.5,183.3)) );
    return -1.0 + 2.0*fract(sin(st)*43758.5453123);
}


// Gradient Noise by Inigo Quilez - iq/2013
// https://www.shadertoy.com/view/XdXGW8
float noise(vec2 st) {
    vec2 i = floor(st);
    vec2 f = fract(st);

    vec2 u = f*f*(3.0-2.0*f);

    return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),
                     dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),
                mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),
                     dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);
}

mat2 rotate2d(float _angle){
    return mat2(cos(_angle),-sin(_angle),
                sin(_angle),cos(_angle));
}

vec2 cubic_hermite(vec2 p0, vec2 p1, vec2 v0, vec2 v1, float t) {
    float sq = t*t;
    float cu = t*t*t;

    float h1 = 2.*cu-3.*sq+1.;
    float h2 = -2.*cu+3.*sq;
    float h3 = cu - 2.*sq + t;
    float h4 = cu - sq;
    return h1*p0+h2*p1+h3*v0+h4*v1;
}

//sinc comb. Good start: sharpness of 10
float comb(float phase, float density, float sharpness){
    float signed_mod = mod(phase,density) - density/2.0;
    float sinc = sin(signed_mod * sharpness)/(signed_mod*sharpness);
    return pow(sinc,SMOOTHNESS);
}

vec2 random_path(float t, float seed){
    vec2 pos0 = random2(vec2(seed,floor(t)));
    vec2 pos1 = random2(vec2(seed,floor(t+1.)));
    vec2 vel0 = random2(vec2(floor(t),seed));
    vec2 vel1 = random2(vec2(floor(t+1.),seed));
    return cubic_hermite(pos0,pos1,vel0,vel1,fract(t));
}

vec2 combed_path(float t, float seed, float comb) {
    float offset = max(0.5,2.0*comb);
    vec2 pos0 = random2(vec2(seed,floor(t)));
    vec2 pos1 = random2(vec2(seed,floor(t+1.)));
    float a0 = atan(pos0.x,pos0.y);
    float a1 = atan(pos1.x,pos1.y);
    float r0 = length(pos0)*offset;
    float r1 = length(pos1)*offset;
    pos0.x = r0 * cos(a0);
    pos0.y = r0 * sin(a0);
    pos1.x = r1 * cos(a1);
    pos1.y = r1 * sin(a1);
    vec2 vel0 = random2(vec2(floor(t),seed));
    vec2 vel1 = random2(vec2(floor(t+1.),seed));
    return cubic_hermite(pos0,pos1,vel0,vel1,fract(t));
}

float blob(vec2 uv, vec2 pos, float brightness, float spotlight, float cutoff){
    float d = distance(uv,pos);
    float mul = 2.0*(d*d*d)/(cutoff*cutoff*cutoff) - 3.0*(d*d)/(cutoff*cutoff) + 1.0;
    float res = mul*brightness*exp(-spotlight*d);
    return d < cutoff ? res : 0.0;
}

float clean_blob(vec2 uv, vec2 pos, float brightness, float spotlight, float cutoff){
    float res = blob(uv,pos,brightness,spotlight,cutoff);
    return res > 0.8 ? 0.8 : res;
}

vec3 mass(vec2 _uv,float metablobs, float subblobs, vec3 col, float ring_strength,float dispersion){
    float a = 1.3;//+noise(vec2(iTime*0.01,1.0))*10.;
    float b = 4.0;//+noise(vec2(iTime*0.01,2.0))*10.;
    float c = 10.0;
    float seed = rand(3.0*col.x+5.0*col.y+7.0*col.z);
    float blob_field = 0.0;
    vec2 uv = _uv * rotate2d(iTime*(0.5-seed)*0.1);
    for(float i = 0.0; i<metablobs; i = i + 1.0){
    float t = iTime * 0.03 * FF + (i)*1.0/(metablobs);
    vec2 pos = combed_path(t, i+seed,comb(iTime*0.05*FF+i,metablobs,0.3));
    for( float j = 0.0; j<subblobs; j = j + 1.0){
        float index = (seed+i*metablobs+j);
        col = mix( col, vec3(0.0), 0.12);
        vec2 offset = dispersion*random_path(t, index);
        float blob = clean_blob( uv, pos+offset, a, b, c);
        blob_field += blob;
        }
    }
    float ring = (blob_field < RING && blob_field > RING-RING_SIZE)
               ? (RING-blob_field)/RING_SIZE
               : 0.0;
    float blob = (blob_field > RING-RING_SIZE ) ? blob_field : 0.0;
    blob = blob < 0.2 && blob != 0.0 ? 0.2 : blob;
	METABLOBS * 5;
	SUBBLOBS * 5;
	RING_SIZE * 5;
	RING * 5;

    float blob_count = metablobs+subblobs;
    vec3 res = col *(ring * ring_strength + blob);
    return res;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;
    uv -= .5;
    uv *= 3.;
    uv *= rotate2d(0.08*iTime);

    float field = 0.0;
    vec3 color_field = vec3(1.0,0.8,0.1);
    vec2 light_pos = vec2(0.0);
    float slow = iTime*0.1;
    vec3 light_color = vec3(
        1.0+1.0*noise(vec2(slow)),
        1.0+1.0*noise(vec2(slow,-3.0)),
        1.0+1.0*noise(vec2(5.0,slow)));
    light_color = mix(light_color, vec3(0.0), 0.5*noise(uv*1.0+vec2(0.25*iTime)));
    color_field = light_color*blob(uv, light_pos, 0.9, 0.0, 100.0);

    //color_field += 40.0*mass(uv,4.,10.,vec3(0.0,0.9,0.0),15.0,0.5);
    color_field -= 1.0*mass(uv,4.,4.,vec3(1.0,0.0,0.0),2.0,0.3);
    color_field -= 10.0*mass(uv,4.,10.,vec3(0.0,1.0,0.0),2.0,0.3);
    color_field -= 30.0*mass(uv,4.,10.,vec3(0.0,0.0,1.0),5.0,0.5);

    //vec3 col = vec3(field);
    vec3 col = color_field;
    fragColor = vec4(col,10)*Alpha;
}

void main(){
    //ZGE does not use mainImage( out vec4 fragColor, in vec2 fragCoord )
    //Rededefined fragCoord as gl_FragCoord.xy-iViewport(dynamic window)
    mainImage(gl_FragColor,gl_FragCoord.xy-iViewport);
}]]>
      </FragmentShaderSource>
      <UniformVariables>
        <ShaderVariable VariableName="iResolution" VariableRef="uResolution"/>
        <ShaderVariable VariableName="iViewport" VariableRef="uViewport"/>
        <ShaderVariable VariableName="iTime" VariableRef="uTime"/>
        <ShaderVariable Name="ff" VariableName="ff" Value="5" ValuePropRef="1.0-Parameters[1]"/>
        <ShaderVariable Name="Alpha" VariableName="Alpha" ValuePropRef="1.0-Parameters[0.0]"/>
      </UniformVariables>
    </Shader>
    <Group Comment="FL Studio Varibles">
      <Children>
        <Array Name="Parameters" SizeDim1="3" Persistent="255">
          <Values>
<![CDATA[789C6360400000000C0001]]>
          </Values>
        </Array>
        <Constant Name="AuthorInfo" Type="2" StringValue="ported by mae"/>
        <Variable Name="uResolution" Type="6"/>
        <Variable Name="uTime"/>
        <Variable Name="uTimeDelta"/>
        <Variable Name="uFrame" Type="1"/>
        <Variable Name="uFrameRate"/>
        <Variable Name="uMouse" Type="8"/>
        <Variable Name="uDate" Type="8"/>
        <Constant Name="ParamHelpConst" Type="2" Value="0.13">
          <StringValue>
<![CDATA[Alpha
ff]]>
          </StringValue>
        </Constant>
      </Children>
    </Group>
    <Group Comment="Unique Uniform Varible Inputs">
      <Children>
        <Variable Name="uViewport" Type="6"/>
      </Children>
    </Group>
    <Group Comment="Materials and Textures">
      <Children>
        <Material Name="mCanvas" Shader="MainShader">
          <Textures>
            <MaterialTexture Name="FeedbackMaterialTexture" TexCoords="1"/>
            <MaterialTexture Name="Source1" Texture="Bitmap1"/>
          </Textures>
        </Material>
      </Children>
    </Group>
    <Bitmap Name="Bitmap1" Width="128" Height="128">
      <Producers>
        <BitmapCells CellStyle="5"/>
      </Producers>
    </Bitmap>
  </Content>
</ZApplication>
